{"version":3,"sources":["../node_modules/@aws-amplify/ui-components/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","aws-exports.js","components/message.js","components/translate.js","components/translateAPI.js","store/state.js","components/chatroom.js","components/detectText.js","components/ccp.js","App.js","reportWebVitals.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","awsmobile","Message","_ref","chat","user","_jsxs","className","concat","username","children","content","_jsx","translatedMessage","ProcessChatText","async","sourceLang","tagretLang","Predictions","convert","translateText","source","text","language","targetLanguage","ProcessChatTextAPI","targetLang","terminologyNames","myInit","body","headers","console","log","result","API","post","error","setGlobalState","useGlobalState","createGlobalState","languageTranslate","Chats","currentContactId","languageOptions","addChat","contactId","setLanguageTranslate","state","setCurrentContactId","Chatroom","props","newMessage","setNewMessage","useState","agentUsername","messageEl","useRef","input","useEffect","current","addEventListener","event","currentTarget","target","scroll","top","scrollHeight","behavior","focus","lang","object","obj","find","undefined","key","getKeyByValue","ref","onSubmit","preventDefault","destLang","translateTextAPI","TranslatedText","data2","prevMsg","session","awsSdkResponse","sendMessage","contentType","message","AbsoluteTime","Id","data","value","item","retrieveValue","maxLength","type","onChange","DetectChatText","interpret","Amplify","configure","awsconfig","addPluggable","AmazonAIPredictionsProvider","Ccp","localLanguageTranslate","setLang","agentChatSessionState","setAgentChatSessionState","setRefreshChild","getEvents","contact","agentChatSession","getAgentConnection","getMediaController","controller","onMessage","messageData","chatDetails","participantId","ParticipantId","DisplayName","Content","textLang","i","length","detectText","textInterpretation","upsert","array","findIndex","_item","push","processChatText","Type","ContactId","subscribeConnectEvents","window","connect","core","onViewContact","ChatSession","onConnecting","contactAttributes","getAttributes","JSON","stringify","contactQueue","getQueue","onAccepted","cnn","getConnections","getType","ConnectionType","AGENT","x_lang","onConnected","onRefresh","onEnded","onDestroy","agent","onStateChange","agentStateChange","newState","setTimeout","agentApp","initApp","connectUrl","ccpParams","region","process","pageOptions","enableAudioDeviceSettings","enablePhoneTypeSettings","Grid","columns","stackable","padded","Row","Auth","App","Component","render","withAuthenticator","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","awsExports","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6923c49c.chunk.js","sourcesContent":["var map = {\n\t\"./amplify-amazon-button_5.entry.js\": [\n\t\t292,\n\t\t16\n\t],\n\t\"./amplify-auth-container.entry.js\": [\n\t\t293,\n\t\t17\n\t],\n\t\"./amplify-auth-fields_9.entry.js\": [\n\t\t294,\n\t\t18\n\t],\n\t\"./amplify-authenticator.entry.js\": [\n\t\t295,\n\t\t5\n\t],\n\t\"./amplify-button_3.entry.js\": [\n\t\t296,\n\t\t19\n\t],\n\t\"./amplify-chatbot.entry.js\": [\n\t\t297,\n\t\t4\n\t],\n\t\"./amplify-checkbox.entry.js\": [\n\t\t298,\n\t\t20\n\t],\n\t\"./amplify-confirm-sign-in_7.entry.js\": [\n\t\t299,\n\t\t6\n\t],\n\t\"./amplify-container.entry.js\": [\n\t\t300,\n\t\t21\n\t],\n\t\"./amplify-federated-buttons_2.entry.js\": [\n\t\t301,\n\t\t22\n\t],\n\t\"./amplify-federated-sign-in.entry.js\": [\n\t\t302,\n\t\t23\n\t],\n\t\"./amplify-form-field_4.entry.js\": [\n\t\t303,\n\t\t24\n\t],\n\t\"./amplify-greetings.entry.js\": [\n\t\t304,\n\t\t25\n\t],\n\t\"./amplify-icon-button.entry.js\": [\n\t\t305,\n\t\t26\n\t],\n\t\"./amplify-icon.entry.js\": [\n\t\t306,\n\t\t7\n\t],\n\t\"./amplify-link.entry.js\": [\n\t\t307,\n\t\t27\n\t],\n\t\"./amplify-nav_2.entry.js\": [\n\t\t308,\n\t\t28\n\t],\n\t\"./amplify-photo-picker.entry.js\": [\n\t\t309,\n\t\t29\n\t],\n\t\"./amplify-picker.entry.js\": [\n\t\t310,\n\t\t30\n\t],\n\t\"./amplify-radio-button_3.entry.js\": [\n\t\t311,\n\t\t8\n\t],\n\t\"./amplify-s3-album.entry.js\": [\n\t\t312,\n\t\t9\n\t],\n\t\"./amplify-s3-image-picker.entry.js\": [\n\t\t313,\n\t\t10\n\t],\n\t\"./amplify-s3-image.entry.js\": [\n\t\t314,\n\t\t11\n\t],\n\t\"./amplify-s3-text-picker.entry.js\": [\n\t\t315,\n\t\t12\n\t],\n\t\"./amplify-s3-text.entry.js\": [\n\t\t316,\n\t\t13\n\t],\n\t\"./amplify-select-mfa-type.entry.js\": [\n\t\t317,\n\t\t31\n\t],\n\t\"./amplify-sign-in-button.entry.js\": [\n\t\t318,\n\t\t14\n\t],\n\t\"./amplify-tooltip.entry.js\": [\n\t\t319,\n\t\t32\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 269;\nmodule.exports = webpackAsyncContext;","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:883465e3-fd11-4feb-8827-49e649739974\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_MNTlucal9\",\n    \"aws_user_pools_web_client_id\": \"5g8rsq4su5djeiuh9u3ueq4c82\",\n    \"oauth\": {},\n    \"aws_cognito_username_attributes\": [],\n    \"aws_cognito_social_providers\": [],\n    \"aws_cognito_signup_attributes\": [\n        \"EMAIL\"\n    ],\n    \"aws_cognito_mfa_configuration\": \"OFF\",\n    \"aws_cognito_mfa_types\": [\n        \"SMS\"\n    ],\n    \"aws_cognito_password_protection_settings\": {\n        \"passwordPolicyMinLength\": 8,\n        \"passwordPolicyCharacters\": []\n    },\n    \"aws_cognito_verification_mechanisms\": [\n        \"EMAIL\"\n    ]\n};\n\n\nexport default awsmobile;\n","import React from 'react';\n\n// This function creates the HTML to add the chats to the store, controlling the layout\nconst Message = ({ chat, user }) => (\n    <li className={`chat ${user === chat.username ? \"right\" : \"left\"}`}>\n        {chat.content}\n        <li className=\"translatedMessage\">{chat.translatedMessage}</li>\n    </li>\n);\n\nexport default Message;\n\n","import Predictions, { AmazonAIPredictionsProvider } from '@aws-amplify/predictions';\n\n\nasync function ProcessChatText(content, sourceLang, tagretLang) {\n\n    let transcriptMessage = await Predictions.convert({\n        translateText: {\n            source: {\n                text: content,\n                language: sourceLang, // defaults configured on aws-exports.js\n                // supported languages https://docs.aws.amazon.com/translate/latest/dg/how-it-works.html#how-it-works-language-codes\n            },\n            targetLanguage: tagretLang\n        }\n    });\n    return transcriptMessage.text\n}\nexport default ProcessChatText\n","import { API } from 'aws-amplify';\n\nasync function ProcessChatTextAPI(content, sourceLang, targetLang, terminologyNames) {\n    const apiName = 'amazonTranslateAPI';\n    const path = '/translate';\n    const myInit = { // OPTIONAL\n        body: { 'content': content, 'sourceLang': sourceLang, 'targetLang': targetLang, 'terminologyNames': terminologyNames },\n        headers: {}, // OPTIONAL\n    };\n    console.log(\"myInit :\", myInit);\n\n    try {\n        var result = await API.post(apiName, path, myInit);\n        console.log(\"ProcessChatTextAPI: \", result);\n        return result;\n    }\n    catch (error) {\n        console.error(\"ProcessChatTextAPI: \", error);\n        return error;\n    }\n}\nexport default ProcessChatTextAPI\n","import { createGlobalState } from \"react-hooks-global-state\";\n\n\nconst { setGlobalState, useGlobalState } = createGlobalState({\n    languageTranslate: [],\n    Chats: [],\n    currentContactId: 'none',\n    languageOptions: {\n        'Afrikaans':'af',\n        'Albanian':'sq',\n        'Amharic':'am',\n        'Arabic':'ar',\n        'Armenian':'hy',\n        'Azerbaijani':'az',\n        'Bengali':'bn',\n        'Bosnian':'bs',\n        'Bulgarian':'bg',\n        'Catalan':'ca',\n        'Chinese (Simplified)':'zh',\n        'Chinese (Traditional)':'zh-TW',\n        'Croatian':'hr',\n        'Czech':'cs',\n        'Danish':'da',\n        'Dari':'fa-AF',\n        'Dutch':'nl',\n        'English':'en',\n        'Estonian':'et',\n        'Farsi (Persian)':'fa',\n        'Filipino Tagalog':'tl',\n        'Finnish':'fi',\n        'French':'fr',\n        'French (Canada)':'fr-CA',\n        'Georgian':'ka',\n        'German':'de',\n        'Greek':'el',\n        'Gujarati':'gu',\n        'Haitian Creole':'ht',\n        'Hausa':'ha',\n        'Hebrew':'he',\n        'Hindi':'hi',\n        'Hungarian':'hu',\n        'Icelandic':'is',\n        'Indonesian':'id',\n        'Italian':'it',\n        'Japanese':'ja',\n        'Kannada':'kn',\n        'Kazakh':'kk',\n        'Korean':'ko',\n        'Latvian':'lv',\n        'Lithuanian':'lt',\n        'Macedonian':'mk',\n        'Malay':'ms',\n        'Malayalam':'ml',\n        'Maltese':'mt',\n        'Mongolian':'mn',\n        'Norwegian':'no',\n        'Persian':'fa',\n        'Pashto':'ps',\n        'Polish':'pl',\n        'Portuguese':'pt',\n        'Romanian':'ro',\n        'Russian':'ru',\n        'Serbian':'sr',\n        'Sinhala':'si',\n        'Slovak':'sk',\n        'Slovenian':'sl',\n        'Somali':'so',\n        'Spanish':'es',\n        'Spanish (Mexico)':'es-MX',\n        'Swahili':'sw',\n        'Swedish':'sv',\n        'Tagalog':'tl',\n        'Tamil':'ta',\n        'Telugu':'te',\n        'Thai':'th',\n        'Turkish':'tr',\n        'Ukrainian':'uk',\n        'Urdu':'ur',\n        'Uzbek':'uz',\n        'Vietnamese':'vi',\n        'Welsh':'cy'\n    },\n});\n\nexport const addChat = (Chats, contactId) => {\n    setGlobalState(\"Chats\", Chats);\n};\n\nexport const clearChat = () => {\n    setGlobalState(\"Chats\", []);\n};\n\n\nexport const setLanguageTranslate = (state) => {\n        setGlobalState(\"languageTranslate\", state);\n};\n\nexport const setCurrentContactId = (contactId) => {\n    setGlobalState(\"currentContactId\", contactId);\n};\n\nexport { useGlobalState };\n","import React, { useEffect, useRef, useState } from 'react';\nimport './chatroom.css';\nimport Message from './message.js';\nimport translateText from './translate'\nimport translateTextAPI from './translateAPI'\nimport { addChat, useGlobalState } from '../store/state';\n\n\nconst Chatroom = (props) => {\n\n    const [Chats] = useGlobalState('Chats');\n    const currentContactId = useGlobalState('currentContactId');\n    const [newMessage, setNewMessage] = useState(\"\");\n    const [languageTranslate] = useGlobalState('languageTranslate');\n    const [languageOptions] = useGlobalState('languageOptions');\n    const agentUsername = \"AGENT\";\n    const messageEl = useRef(null);\n    const input = useRef(null);\n\n\n    function getKeyByValue(object) {\n        let obj = languageTranslate.find(o => o.contactId === currentContactId[0]);\n        if(obj === undefined) {\n            return\n          } else {\n                return Object.keys(object).find(key => object[key] === obj.lang);\n        }\n        \n    }\n\n    const sendMessage = async(session, content) => {\n        const awsSdkResponse = await session.sendMessage({\n            contentType: \"text/plain\",\n            message: content\n        });\n        const { AbsoluteTime, Id } = awsSdkResponse.data;\n    }\n\n    useEffect(() => {\n\n        // this ensures that the chat window will auto scoll to ensure the more recent message is in view\n        if (messageEl) {\n            messageEl.current.addEventListener('DOMNodeInserted', event => {\n                const { currentTarget: target } = event;\n                target.scroll({ top: target.scrollHeight, behavior: 'smooth' });\n            });\n        }\n        // this ensure that the input box has the focus on load and after each entry\n        input.current.focus();\n    }, []);\n\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n        // if there is no text in the the chat input box, do nothing.\n        if (newMessage === \"\") {\n            return;\n        }\n        let destLang = languageTranslate.find(o => o.contactId === currentContactId[0]);\n\n        // translate the agent message  ** Swap the below two round if you wnat to test custom termonologies **\n        // let translatedMessage = await translateText(newMessage, 'en', destLang.lang);\n\n        /***********************************CUSTOM TERMINOLOGY*************************************************    \n         \n            To support custom terminologies comment out the line above, and uncomment the below 2 lines \n         \n         ******************************************************************************************************/\n\n        let translatedMessageAPI = await translateTextAPI(newMessage, 'en', destLang.lang, ['connectChatTranslate']); // Provide a custom terminology created outside of this deployment\n        let translatedMessage = translatedMessageAPI.TranslatedText\n\n        console.log(` Original Message: ` + newMessage + `\\n Translated Message: ` + translatedMessage);\n        // create the new message to add to Chats.\n        let data2 = {\n            contactId: currentContactId[0],\n            username: agentUsername,\n            content: <p>{newMessage}</p>,\n            translatedMessage: <p>{translatedMessage}</p>, // set to {translatedMessage.TranslatedText} if using custom terminologies\n        };\n        // add the new message to the store\n        addChat(prevMsg => [...prevMsg, data2]);\n        // clear the chat input box\n        setNewMessage(\"\");\n\n        \n        \n        const session = retrieveValue(currentContactId[0]);\n\n        function retrieveValue(key){\n            var value = \"\";\n            for(var obj in props.session) {\n            for(var item in props.session[obj]) {\n                if(item === key) {\n                    value = props.session[obj][item];\n                    break;\n                }\n            }\n            }\n            return value;\n        }\n        sendMessage(session, translatedMessage);\n    }\n\n\n\n    return (\n        <div className=\"chatroom\">\n                <h3>Translate - ({languageTranslate.map(lang => {if(lang.contactId === currentContactId[0])return lang.lang})}) {getKeyByValue(languageOptions)}</h3>\n                <ul className=\"chats\" ref={messageEl}>\n                {\n                        // iterate over the Chats, and only display the messages for the currently active chat session\n                        Chats.map(chat => {\n                            if(chat.contactId === currentContactId[0])\n                                return<Message chat={chat} user={agentUsername} />\n                            }\n                        )\n                    }\n                </ul>\n                <form className=\"input\" onSubmit={handleSubmit} >\n                    <input\n                          ref={input}\n                          maxLength = \"1024\"\n                          type=\"text\"\n                          value={newMessage}\n                          onChange={e => setNewMessage(e.target.value)}\n                        />\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n \n            </div>\n    );\n};\n\n\nexport default Chatroom;\n","import Predictions from '@aws-amplify/predictions';\n\nasync function DetectChatText(content) {\n\n    let detectLang = Predictions.interpret({\n        text: {\n            source: {\n                text: content,\n            },\n            type: \"ALL\"\n        }\n    })\n    return detectLang\n}\n\nexport default DetectChatText\n","import React, { useEffect, useState } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport Amplify from 'aws-amplify';\nimport Predictions, { AmazonAIPredictionsProvider } from '@aws-amplify/predictions';\nimport awsconfig from '../aws-exports';\nimport Chatroom from './chatroom';\nimport translateText from './translate'\nimport detectText from './detectText'\nimport { addChat, setLanguageTranslate, clearChat, useGlobalState, setCurrentContactId } from '../store/state';\n\nAmplify.configure(awsconfig);\nAmplify.addPluggable(new AmazonAIPredictionsProvider());\n\n\n\n\nconst Ccp = () => {\n    const [languageTranslate] = useGlobalState('languageTranslate');\n    var localLanguageTranslate = [];\n    const [Chats] = useGlobalState('Chats');\n    const [lang, setLang] = useState(\"\");\n    const [currentContactId] = useGlobalState('currentContactId');\n    const [languageOptions] = useGlobalState('languageOptions');\n    const [agentChatSessionState, setAgentChatSessionState] = useState([]);\n    const [setRefreshChild] = useState([]);\n\n    \n\n    // *******\n    // Subscribe to the chat session\n    // *******\n    function getEvents(contact, agentChatSession) {\n        contact.getAgentConnection().getMediaController().then(controller => {\n            controller.onMessage(messageData => {\n                if (messageData.chatDetails.participantId === messageData.data.ParticipantId) {\n                    console.log(`CDEBUG ===> Agent ${messageData.data.DisplayName} Says`,\n                        messageData.data.Content)\n                }\n                else {\n                    console.log(`CDEBUG ===> Customer ${messageData.data.DisplayName} Says`,messageData.data.Content);\n                    processChatText(messageData.data.Content, messageData.data.Type, messageData.data.ContactId );\n                }\n            })\n        })\n    }\n    // *******\n    // Processing the incoming chat from the Customer\n    // *******\n    async function processChatText(content, type, contactId) {\n        // Check if we know the language for this contactId, if not use dectectText(). This process means we only perform comprehend language detection at most once.\n        let textLang = '';\n          for(var i = 0; i < languageTranslate.length; i++) {\n                if (languageTranslate[i].contactId == contactId) {\n                    textLang = languageTranslate[i].lang\n                     break\n                } \n        }\n        // If the contatId was not found in the store, or the store is empty, perform dectText API to comprehend\n        if (localLanguageTranslate.length == 0 || textLang == ''){\n            let tempLang = await detectText(content);\n            textLang = tempLang.textInterpretation.language\n        }\n\n\n         // Update (or Add if new contactId) the store with the the language code\n         function upsert(array, item) { // (1)\n            const i = array.findIndex(_item => _item.contactId === item.contactId);\n            if (i > -1) array[i] = item; // (2)\n            else array.push(item);\n          }\n        upsert(languageTranslate, {contactId: contactId, lang: textLang})\n        setLanguageTranslate(languageTranslate);\n                \n        // Translate the customer message into English.\n        let translatedMessage = await translateText(content, textLang, 'en');\n        console.log(`CDEBUG ===>  Original Message: ` + content + `\\n Translated Message: ` + translatedMessage);\n        // create the new message to add to Chats.\n        let data2 = {\n            contactId: contactId,\n            username: 'customer',\n            content: <p>{content}</p>,\n            translatedMessage: <p>{translatedMessage}</p>\n        };\n        // Add the new message to the store\n        addChat(prevMsg => [...prevMsg, data2]);\n    }\n\n    // *******\n    // Subscribing to CCP events. See : https://github.com/aws/amazon-connect-streams/blob/master/Documentation.md\n    // *******\n    function subscribeConnectEvents() {\n        window.connect.core.onViewContact(function(event) {\n            var contactId = event.contactId;\n            console.log(\"CDEBUG ===> onViewContact\", contactId)\n            setCurrentContactId(contactId);    \n          });\n\n        console.log(\"CDEBUG ===> subscribeConnectEvents\");\n\n        // If this is a chat session\n        if (window.connect.ChatSession) {\n            console.log(\"CDEBUG ===> Subscribing to Connect Contact Events for chats\");\n            window.connect.contact(contact => {\n\n                // This is invoked when CCP is ringing\n                contact.onConnecting(() => {\n                    console.log(\"CDEBUG ===> onConnecting() >> contactId: \", contact.contactId);\n                    let contactAttributes = contact.getAttributes();\n                    console.log(\"CDEBUG ===> contactAttributes: \", JSON.stringify(contactAttributes));\n                    let contactQueue = contact.getQueue();\n                    console.log(\"CDEBUG ===> contactQueue: \", contactQueue);\n                });\n\n                // This is invoked when the chat is accepted\n                contact.onAccepted(async() => {\n                    console.log(\"CDEBUG ===> onAccepted: \", contact);\n                    const cnn = contact.getConnections().find(cnn => cnn.getType() === window.connect.ConnectionType.AGENT);\n                    const agentChatSession = await cnn.getMediaController();\n                    setCurrentContactId(contact.contactId)\n                    console.log(\"CDEBUG ===> agentChatSession \", agentChatSession)\n                    // Save the session to props, this is required to send messages within the chatroom.js\n                    setAgentChatSessionState(agentChatSessionState => [...agentChatSessionState, {[contact.contactId] : agentChatSession}])\n                \n                    // Get the language from the attributes, if the value is valid then add to the store\n                    localLanguageTranslate = contact.getAttributes().x_lang.value\n                    if (Object.keys(languageOptions).find(key => languageOptions[key] === localLanguageTranslate) !== undefined){\n                        console.log(\"CDEBUG ===> Setting lang code from attribites:\", localLanguageTranslate)\n                        languageTranslate.push({contactId: contact.contactId, lang: localLanguageTranslate})\n                        setLanguageTranslate(languageTranslate);\n                        setRefreshChild('updated') // Workaround to force a refresh of the chatroom UI to show the updated language based on contact attribute.\n                \n                    }\n                    console.log(\"CDEBUG ===> onAccepted, languageTranslate \", languageTranslate)\n                    \n                });\n\n                // This is invoked when the customer and agent are connected\n                contact.onConnected(async() => {\n                    console.log(\"CDEBUG ===> onConnected() >> contactId: \", contact.contactId);\n                    const cnn = contact.getConnections().find(cnn => cnn.getType() === window.connect.ConnectionType.AGENT);\n                    const agentChatSession = await cnn.getMediaController();\n                    getEvents(contact, agentChatSession);\n                });\n\n                // This is invoked when new agent data is available\n                contact.onRefresh(() => {\n                    console.log(\"CDEBUG ===> onRefresh() >> contactId: \", contact.contactId);\n                });\n\n                // This is invoked when the agent moves to ACW\n                contact.onEnded(() => {\n                    console.log(\"CDEBUG ===> onEnded() >> contactId: \", contact.contactId);\n                });\n                \n                // This is invoked when the agent moves out of ACW to a different state\n                contact.onDestroy(() => {\n                    console.log(\"CDEBUG ===> onDestroy() >> contactId: \", contact.contactId);\n                    // TODO need to remove the previous chats from the store\n                    //clearChat()\n                    setCurrentContactId('')\n                });\n            });\n\n            /* \n            **** Subscribe to the agent API **** \n            See : https://github.com/aws/amazon-connect-streams/blob/master/Documentation.md\n            */\n\n            console.log(\"CDEBUG ===> Subscribing to Connect Agent Events\");\n            window.connect.agent((agent) => {\n                agent.onStateChange((agentStateChange) => {\n                    // On agent state change, update the React state.\n                    let state = agentStateChange.newState;\n                    console.log(\"CDEBUG ===> New State: \", state);\n\n                });\n\n            });\n        }\n        else {\n            console.log(\"CDEBUG ===> waiting 3s\");\n            setTimeout(function() { subscribeConnectEvents(); }, 3000);\n        }\n    };\n\n\n    // ***** \n    // Loading CCP\n    // *****\n    useEffect(() => {\n        const connectUrl = process.env.REACT_APP_CONNECT_INSTANCE_URL;\n        window.connect.agentApp.initApp(\n            \"ccp\",\n            \"ccp-container\",\n            connectUrl + \"/connect/ccp-v2/\", { \n                ccpParams: { \n                    region: process.env.REACT_APP_CONNECT_REGION,\n                    pageOptions: {                  // optional\n                        enableAudioDeviceSettings: true, // optional, defaults to 'false'\n                        enablePhoneTypeSettings: true // optional, defaults to 'true'\n                      }\n                } \n            }\n        );\n        subscribeConnectEvents();\n    }, []);\n\n\n    return (\n        <main>\n          <Grid columns='equal' stackable padded>\n          <Grid.Row>\n            {/* CCP window will load here */}\n            <div id=\"ccp-container\"></div>\n            {/* Translate window will laod here. We pass the agent state to be able to use this to push messages to CCP */}\n            <div id=\"chatroom\" ><Chatroom session={agentChatSessionState}/> </div> \n            </Grid.Row>\n          </Grid>\n        </main>\n    );\n};\n\nexport default Ccp;\n","import React, { Component } from \"react\";\nimport Auth from \"@aws-amplify/auth\";\nimport { AmplifySignOut, withAuthenticator } from '@aws-amplify/ui-react';\nimport awsconfig from \"./aws-exports\";\n\nimport \"./App.css\";\nimport 'semantic-ui-less/semantic.less';\n\n// Import components\nimport Ccp from \"./components/ccp\";\n\nAuth.configure(awsconfig);\n\nclass App extends Component {\n       render() {\n              return (\n                     <div className=\"App\">\n                        <Ccp />\n                     </div>\n              );\n       }\n}\n\nexport default withAuthenticator(App)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"amazon-connect-streams\"; // This will make the `connect` available in the current context.\nimport \"amazon-connect-chatjs\";\n\n\n// Import semantic\nimport 'semantic-ui-less/semantic.less';\n\n// Amplify imports for base install\nimport Amplify from \"aws-amplify\";\nimport awsExports from \"./aws-exports\";\nAmplify.configure(awsExports);\n// \n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}